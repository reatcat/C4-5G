# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import core_pb2 as core__pb2


class coreStub(object):
    """定义服务接口
    服务的顺序为：1.传入数据 2.进行训练 3.预测
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Analyse = channel.unary_unary(
                '/pb.core/Analyse',
                request_serializer=core__pb2.AnalyseRequest.SerializeToString,
                response_deserializer=core__pb2.AnalyseResponse.FromString,
                )
        self.Train = channel.unary_unary(
                '/pb.core/Train',
                request_serializer=core__pb2.TrainRequest.SerializeToString,
                response_deserializer=core__pb2.TrainResponse.FromString,
                )
        self.Alert = channel.unary_unary(
                '/pb.core/Alert',
                request_serializer=core__pb2.AlertRequest.SerializeToString,
                response_deserializer=core__pb2.AlertResponse.FromString,
                )


class coreServicer(object):
    """定义服务接口
    服务的顺序为：1.传入数据 2.进行训练 3.预测
    """

    def Analyse(self, request, context):
        """传入训练数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """训练
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Alert(self, request, context):
        """预测
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_coreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Analyse': grpc.unary_unary_rpc_method_handler(
                    servicer.Analyse,
                    request_deserializer=core__pb2.AnalyseRequest.FromString,
                    response_serializer=core__pb2.AnalyseResponse.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=core__pb2.TrainRequest.FromString,
                    response_serializer=core__pb2.TrainResponse.SerializeToString,
            ),
            'Alert': grpc.unary_unary_rpc_method_handler(
                    servicer.Alert,
                    request_deserializer=core__pb2.AlertRequest.FromString,
                    response_serializer=core__pb2.AlertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.core', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class core(object):
    """定义服务接口
    服务的顺序为：1.传入数据 2.进行训练 3.预测
    """

    @staticmethod
    def Analyse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.core/Analyse',
            core__pb2.AnalyseRequest.SerializeToString,
            core__pb2.AnalyseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.core/Train',
            core__pb2.TrainRequest.SerializeToString,
            core__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Alert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.core/Alert',
            core__pb2.AlertRequest.SerializeToString,
            core__pb2.AlertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
